@using System.Diagnostics
@implements IDisposable

    @if (Process != null)
    {
        <div>

            <h3>@Process.Method.Name</h3>
            <label>@Process.DateCreated.ToShortTimeString()</label>
            <br/>
            <table border="1">
                @foreach (var p in Process.Parameters)
                {
                    <tr>
                        <td>@p.Key</td>
                        <td>@p.Value</td>
                    </tr>
                }
            </table>
            <br/>
            @if (Process.DateFinished != null)
            {
                var seconds = Process.DateFinished.Value.Subtract(Process.DateCreated).TotalSeconds;
                <label>@Process.RunState in @seconds seconds</label>
            }
            else
            {
                <label>@Process.RunState</label>
            }
            <br/>
            @if (Process.RunState == RunState.Running)
            {
                <button @onclick="Cancel">Cancel</button>
                <br/>
            }

            @foreach (var s in Process.ResultStrings)
            {
                <label>@s</label>
                <br/>
            }
            @*TODO extra stuff here :)*@
        </div>
    }
  


@code {
    /// <summary>
    /// The process that we are looking at
    /// </summary>
    [Parameter]
    public Process? Process { get; set; }

    private Process.UpdateHandler? _updateHandler;
    

        /// <summary>
        /// Called automatically when the parameters of this page are set
        /// </summary>
        protected override void OnParametersSet()
    {
        void StateChanged(EventArgs e)
        {
            this.StateHasChanged();
        }

        
        _updateHandler = StateChanged;

        Debug.Assert(Process != null, nameof(Process) + " != null");
        Process.Update += _updateHandler;
    }

    /// <summary>
    /// Cancel this process
    /// </summary>
    public void Cancel()
    {
        if(Process?.RunState == RunState.Running)
            Process.CancellationTokenSource.Cancel();
    }

    /// <summary>
    /// Dispose of this process page
    /// </summary>
    public void Dispose()
    {
        if(_updateHandler != null && Process != null)
            Process.Update -= _updateHandler;
    }

}
