@using System.Collections.Concurrent
@using Razor_Components.Inputs




@if (ParameterInput != null && ParameterDictionary != null)
{
    //TODO typeahead
    @switch (ParameterInput)
    {
        case NoInput _:
            break;
        case UnhandledInput ui:
            {
                <tr>
                    <td>@ParameterInput.ParameterName</td>
                    <td>@ui.Error</td>
                    <td>@ParameterInput.Remarks</td>

                </tr>

                break;
            }
        case InputInput ii:
            {
                // ReSharper disable once UnusedVariable - property is bound to
                var listener = new Listener(ii.ParameterName, ParameterDictionary, ii.Converter);

                <tr>
                    <td>@ParameterInput.ParameterName</td>
                    <td><input type=@ii.Converter.InputType pattern=@ii.Converter.InputPattern @bind="listener.Property" /></td>
                    <td>@ParameterInput.Remarks</td>
                </tr>

                break;
            }
        case DropdownInput di:
            {
                // ReSharper disable once UnusedVariable - property is bound to
                var listener = new Listener(di.ParameterName, ParameterDictionary, di.Converter);

                <tr>
                    <td>@ParameterInput.ParameterName</td>

                    <td>
                        <select @bind="listener.Property">
                            @{
                                if (di.IsParameterNullable)
                                {
                                    <option value=""></option>
                                }
                                foreach (var enumValue in di.Options)
                                {
                                    <option value="@enumValue">
                                        @enumValue
                                    </option>
                                }

                            }

                        </select>
                    </td>
                    <td>@ParameterInput.Remarks</td>
                </tr>
                break;
            }
        case CheckboxInput ci: //TODO handle nullable properly
            {
                // ReSharper disable once UnusedVariable - property is bound to
                var listener = new BoolListener(ci.ParameterName, ParameterDictionary, ci.Nullable);

                <tr>
                    <td>@ParameterInput.ParameterName</td>
                    <td><input type="checkbox" @bind="listener.Property" /></td>
                    <td>@ParameterInput.Remarks</td>
                </tr>

                break;
            }
        case TextAreaInput tai:
        {
            var listener = new Listener(tai.ParameterName, ParameterDictionary, tai.Converter);

            <tr>
                <td>@ParameterInput.ParameterName</td>
                <td><textarea @bind="listener.Property"></textarea></td>
                <td>@ParameterInput.Remarks</td>
            </tr>

            break;

            }
        default:
            throw new ArgumentOutOfRangeException();
    }
}


@code {
    /// <summary>
    /// The parameter to create a box for
    /// </summary>
    [Parameter]
    public IParameterInput? ParameterInput { get; set; }

    /// <summary>
    /// Dictionary of parameters and current values
    /// </summary>
    [Parameter]
    public ConcurrentDictionary<string, object?>? ParameterDictionary { get; set; }
    
    /// <summary>
    /// User metadata about this parameter
    /// </summary>
    [Parameter]
    public ParameterMetadata? ParameterMetadata { get; set; }
}
